// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/playlist_screen/data/models/custom_playlist_model.dart';
import 'features/utils/models/custom_song_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 595188489506221610),
      name: 'CustomSongModel',
      lastPropertyId: const obx_int.IdUid(3, 1493877129334644705),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3728607785459052450),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4293629196175655499),
            name: 'songName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1493877129334644705),
            name: 'songPath',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 3148664148534919160),
      name: 'CustomPlaylistModel',
      lastPropertyId: const obx_int.IdUid(2, 5332117621332280702),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4494157200415196928),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5332117621332280702),
            name: 'playlistName',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 7502583651702714161),
            name: 'songsList',
            targetId: const obx_int.IdUid(2, 595188489506221610))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 3148664148534919160),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 7502583651702714161),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [814155545932843622],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3042537194007865223, 615082571129038544],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    CustomSongModel: obx_int.EntityDefinition<CustomSongModel>(
        model: _entities[0],
        toOneRelations: (CustomSongModel object) => [],
        toManyRelations: (CustomSongModel object) => {},
        getId: (CustomSongModel object) => object.id,
        setId: (CustomSongModel object, int id) {
          object.id = id;
        },
        objectToFB: (CustomSongModel object, fb.Builder fbb) {
          final songNameOffset = fbb.writeString(object.songName);
          final songPathOffset = fbb.writeString(object.songPath);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, songNameOffset);
          fbb.addOffset(2, songPathOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final songNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final songPathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = CustomSongModel(
              id: idParam, songName: songNameParam, songPath: songPathParam);

          return object;
        }),
    CustomPlaylistModel: obx_int.EntityDefinition<CustomPlaylistModel>(
        model: _entities[1],
        toOneRelations: (CustomPlaylistModel object) => [],
        toManyRelations: (CustomPlaylistModel object) => {
              obx_int.RelInfo<CustomPlaylistModel>.toMany(1, object.id):
                  object.songsList
            },
        getId: (CustomPlaylistModel object) => object.id,
        setId: (CustomPlaylistModel object, int id) {
          object.id = id;
        },
        objectToFB: (CustomPlaylistModel object, fb.Builder fbb) {
          final playlistNameOffset = fbb.writeString(object.playlistName);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, playlistNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final playlistNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final object =
              CustomPlaylistModel(id: idParam, playlistName: playlistNameParam);
          obx_int.InternalToManyAccess.setRelInfo<CustomPlaylistModel>(
              object.songsList,
              store,
              obx_int.RelInfo<CustomPlaylistModel>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CustomSongModel] entity fields to define ObjectBox queries.
class CustomSongModel_ {
  /// See [CustomSongModel.id].
  static final id =
      obx.QueryIntegerProperty<CustomSongModel>(_entities[0].properties[0]);

  /// See [CustomSongModel.songName].
  static final songName =
      obx.QueryStringProperty<CustomSongModel>(_entities[0].properties[1]);

  /// See [CustomSongModel.songPath].
  static final songPath =
      obx.QueryStringProperty<CustomSongModel>(_entities[0].properties[2]);
}

/// [CustomPlaylistModel] entity fields to define ObjectBox queries.
class CustomPlaylistModel_ {
  /// See [CustomPlaylistModel.id].
  static final id =
      obx.QueryIntegerProperty<CustomPlaylistModel>(_entities[1].properties[0]);

  /// See [CustomPlaylistModel.playlistName].
  static final playlistName =
      obx.QueryStringProperty<CustomPlaylistModel>(_entities[1].properties[1]);

  /// see [CustomPlaylistModel.songsList]
  static final songsList =
      obx.QueryRelationToMany<CustomPlaylistModel, CustomSongModel>(
          _entities[1].relations[0]);
}
